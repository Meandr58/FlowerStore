from django.db.models.signals import pre_save, post_save
from django.dispatch import receiver
from django.contrib.auth import get_user_model
from .models import Profile, Flower, Order, OrderStatusHistory
from telegram import Bot
from django.conf import settings

User = get_user_model()

@receiver(post_save, sender=User)
def create_or_update_user_profile(sender, instance, created, **kwargs):
    if created:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω
        Profile.objects.create(user=instance)
    else:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
        instance.profile.save()


from django.test import TestCase
from django.contrib.auth.models import User
from flowers.models import Order, Item, OrderStatusHistory

class OrderStatusTestCase(TestCase):
    def test_order_status_history_on_status_change(self):
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.create_user(username='testuser', password='testpass')

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order.objects.create(user=user, status="new")

        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–∫–∞–∑
        item = Item.objects.create(name="Flowers")
        order.items.add(item)

        # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        order.status = "shipped"
        order.save()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
        status_history = OrderStatusHistory.objects.filter(order=order)
        self.assertEqual(status_history.count(), 2)  # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
        self.assertEqual(status_history.last().status, "shipped")


@receiver(pre_save, sender=Order)
def save_previous_status(sender, instance, **kwargs):
    if instance.pk:
        instance._previous_status = Order.objects.get(pk=instance.pk).status
        print(f"Pre-save signal triggered for order {instance.id}. Previous status: {instance._previous_status}")

@receiver(post_save, sender=Order)
def create_order_status_history(sender, instance, created, **kwargs):
    print(f"Post-save signal triggered for order {instance.id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if created:
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
        OrderStatusHistory.objects.create(order=instance, status=instance.status)
        print(f"Order {instance.id} created with status {instance.status}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        message = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{instance.id}\nüì¶ –°—Ç–∞—Ç—É—Å: {instance.status}"
        bot.send_message(chat_id="@admin_chat_id", text=message)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        previous_instance = Order.objects.get(pk=instance.pk)
        if instance.status != previous_instance.status:
            OrderStatusHistory.objects.create(order=instance, status=instance.status)
            print(f"Order {instance.id} status changed from {previous_instance.status} to {instance.status}")@receiver(post_save, sender=OrderStatusHistory)

def update_order_status(sender, instance, **kwargs):
    order = instance.order
    order.status = instance.status
    order.save()


