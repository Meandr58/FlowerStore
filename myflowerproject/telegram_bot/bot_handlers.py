import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from django.apps import apps
from django.http import HttpResponse
from django.conf import settings
from telegram_bot.bot import bot
from flowers.models import Review, Order, Profile

Order = apps.get_model('flowers', 'Order', 'Review')

TELEGRAM_TOKEN = "7617951152:AAEwkvEbHvvBnbvddd-a7l6UAWfBfew2-fw"

def webhook_view(request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram."""
    application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
    update = Update.de_json(request.body.decode('utf-8'), bot)
    application.update_queue.put(update)  # –≠—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    return HttpResponse(status=200)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ Updater
app = Application.builder().token(TELEGRAM_TOKEN).build()

async def start(update: Update, context: CallbackContext):
    print("Start command called") # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ü–≤–µ—Ç–æ–≤.")

async def help_command(update: Update, context: CallbackContext):
    print("Help command called") # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start ‚Äì –Ω–∞—á–∞—Ç—å\n/help ‚Äì —Å–ø—Ä–∞–≤–∫–∞")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

async def echo(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await update.message.reply_text(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {update.message.text}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫–æ–º–∞–Ω–¥—ã)
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def error(update: Update, context: CallbackContext) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    logger.warning(f"–û—à–∏–±–∫–∞ '{context.error}' –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {update}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.add_error_handler(error)


async def order_status(update: Update, context: CallbackContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞."""
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /order_status <ID> <—Å—Ç–∞—Ç—É—Å>")
        return

    order_id, status = context.args[0], " ".join(context.args[1:])
    Order.objects.filter(id=order_id).update(status=status)
    await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'")

app.add_handler(CommandHandler("order_status", order_status))


def repeat_order(update: Update, context: CallbackContext):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ."""
    user_id = update.message.from_user.id
    try:
        # –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ telegram_id
        profile = Profile.objects.get(telegram_id=user_id)
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_order = Order.objects.filter(user=profile.user).last()

        if last_order:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            new_order = Order.objects.create(
                user=last_order.user,
                recipient_name=last_order.recipient_name,
                address=last_order.address,
                phone=last_order.phone,
                delivery_date=last_order.delivery_date,
                delivery_time=last_order.delivery_time,
                status="new"
            )
            update.message.reply_text(f"–ó–∞–∫–∞–∑ ‚Ññ{new_order.id} –ø–æ–≤—Ç–æ—Ä–µ–Ω!")
            return new_order
        else:
            update.message.reply_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return None
    except Profile.DoesNotExist:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return None

app.add_handler(CommandHandler("repeat_order", repeat_order))


async def leave_review(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –∫ –∑–∞–∫–∞–∑—É."""
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /leave_review <ID –∑–∞–∫–∞–∑–∞> <—Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞>")
        return

    order_id, review_text = context.args[0], " ".join(context.args[1:])
    Review.objects.create(order_id=order_id, text=review_text)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")

app.add_handler(CommandHandler("leave_review", leave_review))


async def analytics(update: Update, context: CallbackContext):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º."""
    total_orders = Order.objects.count()
    delivered_orders = Order.objects.filter(status="–¥–æ—Å—Ç–∞–≤–ª–µ–Ω").count()

    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {delivered_orders}"
    )

app.add_handler(CommandHandler("analytics", analytics))


async def send_telegram_notification(chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
    try:
        await bot.send_message(chat_id=chat_id, text=message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def start(update: Update, context: CallbackContext):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑", "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"], ["–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
    )

app.add_handler(CommandHandler("start", start))

